getwd()
setwd("ProgrammingAssignment2")
getwd()
getwd()
matrix(1:4,1:5)
class(matrix(1:4))
a<-b<-c<-6
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix()
z<-makeCacheMatrix()
z
x<-matrix(1:16,4,4)
View(x)
y<-makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve(x)
cacheSolve(y)
xinv <- solve(x)
solve(x)
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
h8 <- hilbert(8); h8
sh8 <- solve(h8)
sh8
round(sh8 %*% h8, 3)
round(sh8 %*% h8, 4)
round(sh8 %*% h8, 0)
round(sh8 %*% h8, 10)
round(sh8 %*% h8, 3)
x <-as.numeric(x)
x
x <-matrix(x)
x <- rbind(x[1:4], x[5:8], x[;9:12], x[13:16])
x <- rbind(x[1:4], x[5:8], x[9:12], x[13:16])
x
solve(x)
x <- cbind(x[1:4], x[5:8], x[9:12], x[13:16])
x
solve(x)
makeCacheMatrix()
cacheSolve(h8)
makeCacheMatrix(h8)
h8c <- makeCacheMatrix(h8)
cacheSolve(h8)
makeCacheMatrix <- function(x = matrix()) {
m <- matrix(NULL)
set <- function(y) {
x <<- y
m <<- matrix(NULL)
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
h8c <- makeCacheMatrix(h8)
matrix(NULL)
matrix()
m <- NULL
class(m)
function(solve) m
blah <- function(solve) m
blah(h8)
x <- matrix(c(4,2,7,6),2,2)
y<-makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
y<-makeCacheMatrix(x)
z <- cacheSolve(y)
print(z)
z <- cacheSolve(y)
print(z)
m = x %*% z; m
cacheSolve
y<-makeCacheMatrix()
z <- cacheSolve(y)
z
y<-makeCacheMatrix(x)
x <- matrix(c(5,8,3,1),2,2)
y<-makeCacheMatrix(x)
z <- cacheSolve(y); z
z <- cacheSolve(y); z
view(y)
View(y)
